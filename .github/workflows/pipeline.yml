name: Pipeline
on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        options:
          - production
          - staging
        default: staging

  push:
    branches:
      - "main"
      - "dev"

permissions:
  packages: write
  contents: read

env:
  COOLIFY_URL: ${{ secrets.COOLIFY_URL }}
  GO_BEARTRAK_RESOURCE_ID: ${{ ((github.event_name == 'workflow_dispatch' && inputs.environment == 'production') || (github.event_name == 'push' && endsWith(github.ref, '/main'))) && vars.GO_BEARTRAK_PRODUCTION_RESOURCE_ID || vars.GO_BEARTRAK_STAGING_RESOURCE_ID }}
  GO_BLUETRAK_RESOURCE_ID: ${{ ((github.event_name == 'workflow_dispatch' && inputs.environment == 'production') || (github.event_name == 'push' && endsWith(github.ref, '/main'))) && vars.GO_BLUETRAK_PRODUCTION_RESOURCE_ID || vars.GO_BLUETRAK_STAGING_RESOURCE_ID }}
  OTP_RESOURCE_ID: ${{ ((github.event_name == 'workflow_dispatch' && inputs.environment == 'production') || (github.event_name == 'push' && endsWith(github.ref, '/main'))) && vars.OTP_PRODUCTION_RESOURCE_ID || vars.OTP_STAGING_RESOURCE_ID }}
  COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [go-server, otp]
        include:
          - service: go-server
            context: ./go-server
            dockerfile: go-server/Dockerfile
            tags: |
              ghcr.io/benkoppe/bear-trak-go:latest
              ghcr.io/benkoppe/bear-trak-go:${{ github.sha }}
          - service: otp
            context: ./otp
            dockerfile: otp/Dockerfile
            school: cornell
            tags: |
              ghcr.io/benkoppe/bear-trak-otp-cornell:latest
              ghcr.io/benkoppe/bear-trak-otp-cornell:${{ github.sha }}
    outputs:
      GO_BEARTRAK_RESOURCE_ID: ${{ env.GO_BEARTRAK_RESOURCE_ID }}
      GO_BLUETRAK_RESOURCE_ID: ${{ env.GO_BLUETRAK_RESOURCE_ID }}
      OTP_RESOURCE_ID: ${{ env.OTP_RESOURCE_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log into the Container registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Export SCHOOL if set
        if: matrix.school != ''
        run: echo "SCHOOL=${{ matrix.school }}" >> $GITHUB_ENV

      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ matrix.tags }}

  coolify-deploy:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-images
    strategy:
      matrix:
        include:
          - service: go-server-beartrak
            coolify_resource_id: ${{ needs.build-and-push-images.outputs.GO_BEARTRAK_RESOURCE_ID }}
          - service: go-server-bluetrak
            coolify_resource_id: ${{ needs.build-and-push-images.outputs.GO_BLUETRAK_RESOURCE_ID }}
          - service: otp
            coolify_resource_id: ${{ needs.build-and-push-images.outputs.OTP_RESOURCE_ID }}
    steps:
      - name: Update source commit SHA in Coolify for ${{ matrix.service }}
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ env.COOLIFY_URL }}/api/v1/applications/${{ matrix.coolify_resource_id }}
          method: PATCH
          bearerToken: ${{ env.COOLIFY_API_TOKEN }}
          data: >-
            {
            "git_commit_sha": "${{ github.sha }}"
            }

      - name: Trigger Coolify deployment via webhook for ${{ matrix.service }}
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ env.COOLIFY_URL }}/api/v1/deploy?uuid=${{ matrix.coolify_resource_id }}&force=false
          method: GET
          bearerToken: ${{ env.COOLIFY_API_TOKEN }}
