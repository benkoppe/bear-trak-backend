// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// DeleteV1DiningUser implements deleteV1DiningUser operation.
	//
	// Deletes a user given a session.
	//
	// DELETE /v1/dining/user
	DeleteV1DiningUser(ctx context.Context, params DeleteV1DiningUserParams) (DeleteV1DiningUserRes, error)
	// GetV1Alerts implements getV1Alerts operation.
	//
	// Returns all of BearTrak's active alerts.
	//
	// GET /v1/alerts
	GetV1Alerts(ctx context.Context) ([]Alert, error)
	// GetV1Dining implements getV1Dining operation.
	//
	// Returns all necessary data for BearTrak's dining section.
	//
	// GET /v1/dining
	GetV1Dining(ctx context.Context) ([]Eatery, error)
	// GetV1DiningUser implements getV1DiningUser operation.
	//
	// Get Information.
	//
	// GET /v1/dining/user
	GetV1DiningUser(ctx context.Context, params GetV1DiningUserParams) (GetV1DiningUserRes, error)
	// GetV1DiningUserAccounts implements getV1DiningUserAccounts operation.
	//
	// Returns a dining user's transaction accounts given a session.
	//
	// GET /v1/dining/user/accounts
	GetV1DiningUserAccounts(ctx context.Context, params GetV1DiningUserAccountsParams) (GetV1DiningUserAccountsRes, error)
	// GetV1DiningUserBarcode implements getV1DiningUserBarcode operation.
	//
	// Returns a user's dining hall barcode given a session.
	//
	// GET /v1/dining/user/barcode
	GetV1DiningUserBarcode(ctx context.Context, params GetV1DiningUserBarcodeParams) (GetV1DiningUserBarcodeRes, error)
	// GetV1DiningUserSession implements getV1DiningUserSession operation.
	//
	// Refreshes a session given a user device.
	//
	// GET /v1/dining/user/session
	GetV1DiningUserSession(ctx context.Context, params GetV1DiningUserSessionParams) (GetV1DiningUserSessionRes, error)
	// GetV1Events implements getV1Events operation.
	//
	// Returns event data for BearTrak's events section.
	//
	// GET /v1/events
	GetV1Events(ctx context.Context) ([]Event, error)
	// GetV1GymCapacities implements getV1GymCapacities operation.
	//
	// Returns all time-logged gym capacity data.
	//
	// GET /v1/gyms/capacities
	GetV1GymCapacities(ctx context.Context) ([]GymCapacityData, error)
	// GetV1GymCapacityPredictions implements getV1GymCapacityPredictions operation.
	//
	// Returns all time-logged gym capacity prediction data.
	//
	// GET /v1/gyms/capacities/predictions
	GetV1GymCapacityPredictions(ctx context.Context) ([]GymCapacityPredictions, error)
	// GetV1Gyms implements getV1Gyms operation.
	//
	// Returns all necessary data for BearTrak's gym section.
	//
	// GET /v1/gyms
	GetV1Gyms(ctx context.Context) ([]Gym, error)
	// GetV1Study implements getV1Study operation.
	//
	// Returns all necessary data for BearTrak's study section.
	//
	// GET /v1/study
	GetV1Study(ctx context.Context) (*StudyData, error)
	// GetV1TransitRoutes implements getV1TransitRoutes operation.
	//
	// Returns non time-sensitive, route-related data for BearTrak's transit section.
	//
	// GET /v1/transit/routes
	GetV1TransitRoutes(ctx context.Context) ([]BusRoute, error)
	// GetV1TransitVehicles implements getV1TransitVehicles operation.
	//
	// Returns time-sensitive, vehicle-related data for BearTrak's transit section.
	//
	// GET /v1/transit/vehicles
	GetV1TransitVehicles(ctx context.Context) ([]Vehicle, error)
	// PostV1DiningUser implements postV1DiningUser operation.
	//
	// Registers a new user given a device and session.
	//
	// POST /v1/dining/user
	PostV1DiningUser(ctx context.Context, params PostV1DiningUserParams) (PostV1DiningUserRes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
