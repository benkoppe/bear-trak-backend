// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// DeleteV1DiningUserParams is parameters of deleteV1DiningUser operation.
type DeleteV1DiningUserParams struct {
	// An authenticated dining user sessionId.
	SessionId string
}

func unpackDeleteV1DiningUserParams(packed middleware.Parameters) (params DeleteV1DiningUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "sessionId",
			In:   "query",
		}
		params.SessionId = packed[key].(string)
	}
	return params
}

func decodeDeleteV1DiningUserParams(args [0]string, argsEscaped bool, r *http.Request) (params DeleteV1DiningUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: sessionId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sessionId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SessionId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sessionId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetV1DiningUserParams is parameters of getV1DiningUser operation.
type GetV1DiningUserParams struct {
	// An authenticated dining user sessionId.
	SessionId string
}

func unpackGetV1DiningUserParams(packed middleware.Parameters) (params GetV1DiningUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "sessionId",
			In:   "query",
		}
		params.SessionId = packed[key].(string)
	}
	return params
}

func decodeGetV1DiningUserParams(args [0]string, argsEscaped bool, r *http.Request) (params GetV1DiningUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: sessionId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sessionId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SessionId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sessionId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetV1DiningUserAccountsParams is parameters of getV1DiningUserAccounts operation.
type GetV1DiningUserAccountsParams struct {
	// An authenticated dining user sessionId.
	SessionId string
}

func unpackGetV1DiningUserAccountsParams(packed middleware.Parameters) (params GetV1DiningUserAccountsParams) {
	{
		key := middleware.ParameterKey{
			Name: "sessionId",
			In:   "query",
		}
		params.SessionId = packed[key].(string)
	}
	return params
}

func decodeGetV1DiningUserAccountsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetV1DiningUserAccountsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: sessionId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sessionId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SessionId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sessionId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetV1DiningUserBarcodeParams is parameters of getV1DiningUserBarcode operation.
type GetV1DiningUserBarcodeParams struct {
	// An authenticated dining user sessionId.
	SessionId string
}

func unpackGetV1DiningUserBarcodeParams(packed middleware.Parameters) (params GetV1DiningUserBarcodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "sessionId",
			In:   "query",
		}
		params.SessionId = packed[key].(string)
	}
	return params
}

func decodeGetV1DiningUserBarcodeParams(args [0]string, argsEscaped bool, r *http.Request) (params GetV1DiningUserBarcodeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: sessionId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sessionId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SessionId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sessionId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetV1DiningUserSessionParams is parameters of getV1DiningUserSession operation.
type GetV1DiningUserSessionParams struct {
	// A dining user deviceId.
	DeviceId string
	// A dining user device PIN.
	PIN string
}

func unpackGetV1DiningUserSessionParams(packed middleware.Parameters) (params GetV1DiningUserSessionParams) {
	{
		key := middleware.ParameterKey{
			Name: "deviceId",
			In:   "query",
		}
		params.DeviceId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "PIN",
			In:   "query",
		}
		params.PIN = packed[key].(string)
	}
	return params
}

func decodeGetV1DiningUserSessionParams(args [0]string, argsEscaped bool, r *http.Request) (params GetV1DiningUserSessionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: deviceId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "deviceId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DeviceId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "deviceId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: PIN.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "PIN",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PIN = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "PIN",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// PostV1DiningUserParams is parameters of postV1DiningUser operation.
type PostV1DiningUserParams struct {
	// An authenticated dining user sessionId.
	SessionId string
	// A dining user deviceId.
	DeviceId string
	// A dining user device PIN.
	PIN string
}

func unpackPostV1DiningUserParams(packed middleware.Parameters) (params PostV1DiningUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "sessionId",
			In:   "query",
		}
		params.SessionId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "deviceId",
			In:   "query",
		}
		params.DeviceId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "PIN",
			In:   "query",
		}
		params.PIN = packed[key].(string)
	}
	return params
}

func decodePostV1DiningUserParams(args [0]string, argsEscaped bool, r *http.Request) (params PostV1DiningUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: sessionId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sessionId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SessionId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sessionId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: deviceId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "deviceId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DeviceId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "deviceId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: PIN.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "PIN",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PIN = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "PIN",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
