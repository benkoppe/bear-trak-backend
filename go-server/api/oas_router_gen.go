// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"

			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "alerts"

				if l := len("alerts"); len(elem) >= l && elem[0:l] == "alerts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetV1AlertsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 'd': // Prefix: "dining"

				if l := len("dining"); len(elem) >= l && elem[0:l] == "dining" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetV1DiningRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/user"

					if l := len("/user"); len(elem) >= l && elem[0:l] == "/user" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteV1DiningUserRequest([0]string{}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetV1DiningUserRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handlePostV1DiningUserRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "accounts"

							if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetV1DiningUserAccountsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						case 'b': // Prefix: "barcode"

							if l := len("barcode"); len(elem) >= l && elem[0:l] == "barcode" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetV1DiningUserBarcodeRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						case 's': // Prefix: "session"

							if l := len("session"); len(elem) >= l && elem[0:l] == "session" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetV1DiningUserSessionRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						}

					}

				}

			case 'g': // Prefix: "gyms"

				if l := len("gyms"); len(elem) >= l && elem[0:l] == "gyms" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetV1GymsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/capacities"

					if l := len("/capacities"); len(elem) >= l && elem[0:l] == "/capacities" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetV1GymCapacitiesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/predictions"

						if l := len("/predictions"); len(elem) >= l && elem[0:l] == "/predictions" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetV1GymCapacityPredictionsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				}

			case 's': // Prefix: "study"

				if l := len("study"); len(elem) >= l && elem[0:l] == "study" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetV1StudyRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 't': // Prefix: "transit/"

				if l := len("transit/"); len(elem) >= l && elem[0:l] == "transit/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'r': // Prefix: "routes"

					if l := len("routes"); len(elem) >= l && elem[0:l] == "routes" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetV1TransitRoutesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				case 'v': // Prefix: "vehicles"

					if l := len("vehicles"); len(elem) >= l && elem[0:l] == "vehicles" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetV1TransitVehiclesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"

			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "alerts"

				if l := len("alerts"); len(elem) >= l && elem[0:l] == "alerts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = GetV1AlertsOperation
						r.summary = "Alerts"
						r.operationID = "getV1Alerts"
						r.pathPattern = "/v1/alerts"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'd': // Prefix: "dining"

				if l := len("dining"); len(elem) >= l && elem[0:l] == "dining" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetV1DiningOperation
						r.summary = "Dining"
						r.operationID = "getV1Dining"
						r.pathPattern = "/v1/dining"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/user"

					if l := len("/user"); len(elem) >= l && elem[0:l] == "/user" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = DeleteV1DiningUserOperation
							r.summary = "Delete"
							r.operationID = "deleteV1DiningUser"
							r.pathPattern = "/v1/dining/user"
							r.args = args
							r.count = 0
							return r, true
						case "GET":
							r.name = GetV1DiningUserOperation
							r.summary = "Get Information"
							r.operationID = "getV1DiningUser"
							r.pathPattern = "/v1/dining/user"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = PostV1DiningUserOperation
							r.summary = "Register"
							r.operationID = "postV1DiningUser"
							r.pathPattern = "/v1/dining/user"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "accounts"

							if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetV1DiningUserAccountsOperation
									r.summary = "Dining Accounts"
									r.operationID = "getV1DiningUserAccounts"
									r.pathPattern = "/v1/dining/user/accounts"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'b': // Prefix: "barcode"

							if l := len("barcode"); len(elem) >= l && elem[0:l] == "barcode" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetV1DiningUserBarcodeOperation
									r.summary = "Dining Barcode"
									r.operationID = "getV1DiningUserBarcode"
									r.pathPattern = "/v1/dining/user/barcode"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 's': // Prefix: "session"

							if l := len("session"); len(elem) >= l && elem[0:l] == "session" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetV1DiningUserSessionOperation
									r.summary = "Refresh Token"
									r.operationID = "getV1DiningUserSession"
									r.pathPattern = "/v1/dining/user/session"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 'g': // Prefix: "gyms"

				if l := len("gyms"); len(elem) >= l && elem[0:l] == "gyms" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetV1GymsOperation
						r.summary = "Gyms"
						r.operationID = "getV1Gyms"
						r.pathPattern = "/v1/gyms"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/capacities"

					if l := len("/capacities"); len(elem) >= l && elem[0:l] == "/capacities" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetV1GymCapacitiesOperation
							r.summary = "Gym Capacities"
							r.operationID = "getV1GymCapacities"
							r.pathPattern = "/v1/gyms/capacities"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/predictions"

						if l := len("/predictions"); len(elem) >= l && elem[0:l] == "/predictions" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetV1GymCapacityPredictionsOperation
								r.summary = "Gym Capacity Predictions"
								r.operationID = "getV1GymCapacityPredictions"
								r.pathPattern = "/v1/gyms/capacities/predictions"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				}

			case 's': // Prefix: "study"

				if l := len("study"); len(elem) >= l && elem[0:l] == "study" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = GetV1StudyOperation
						r.summary = "Study"
						r.operationID = "getV1Study"
						r.pathPattern = "/v1/study"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 't': // Prefix: "transit/"

				if l := len("transit/"); len(elem) >= l && elem[0:l] == "transit/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'r': // Prefix: "routes"

					if l := len("routes"); len(elem) >= l && elem[0:l] == "routes" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = GetV1TransitRoutesOperation
							r.summary = "Routes"
							r.operationID = "getV1TransitRoutes"
							r.pathPattern = "/v1/transit/routes"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'v': // Prefix: "vehicles"

					if l := len("vehicles"); len(elem) >= l && elem[0:l] == "vehicles" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = GetV1TransitVehiclesOperation
							r.summary = "Vehicles"
							r.operationID = "getV1TransitVehicles"
							r.pathPattern = "/v1/transit/vehicles"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			}

		}
	}
	return r, false
}
